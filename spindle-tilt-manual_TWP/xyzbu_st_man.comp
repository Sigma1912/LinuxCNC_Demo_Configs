component xyzbu_st_man "Switchable kinematics for 3 axis machine with a manually tilting spindle B ";

// Note: Variables twp_[x,y,z] and pre_rot are provided for experimental implementation of Tilted Work Plane only and are not used in
// the regular simulation configuration.  

description
"""
.if \\n[.g] .mso www.tmac



""";
// The fpin pin is not accessible in kinematics functions.
// Use the *_setup() function for pins and params used by kinematics.
pin out s32 fpin=0"pin to demonstrate use of a conventional (non-kinematics) function fdemo";
function fdemo;

license "GPL";
author "David Mueller";
;;

#include "rtapi_math.h"
#include "kinematics.h"


static struct haldata {
  // Example pin pointers:
  hal_u32_t *in;
  hal_u32_t *out;

  // Declare hal pin pointers used for xyzbu_st kinematics:

  hal_float_t *tool_offset_z;
  hal_float_t *z_pivot;
  hal_float_t *x_offset;
  hal_float_t *man_b_rot;
  hal_float_t *pre_rot;

  // Example parameters:
  // hal_float_t param_rw;
  // hal_float_t param_ro;

  //Declare hal pin pointers used for switchable kinematics
  hal_bit_t   *kinstype_is_0;
  hal_bit_t   *kinstype_is_1;
  hal_bit_t   *kinstype_is_2;
} *haldata;


FUNCTION(fdemo) {
   // This function can be added to a thread (addf) for
   // purposes not related to the kinematics functions.
   if (fpin == 0) {
       rtapi_print("fdemo function added to thread\n");
   }
   fpin++;
}

static int xyzbu_st_setup(void) {
#define HAL_PREFIX "xyzbu_st_man_kins"
    int res=0;
    // inbherit comp_id from rtapi_main()
    if (comp_id < 0) goto error;
    // set unready to allow creation of pins
    if (hal_set_unready(comp_id)) goto error;

    haldata = hal_malloc(sizeof(struct haldata));
    if (!haldata) goto error;

    // hal pin examples:
    res += hal_pin_u32_newf(HAL_IN ,&(haldata->in) ,comp_id,"%s.in" ,HAL_PREFIX);
    res += hal_pin_u32_newf(HAL_OUT,&(haldata->out),comp_id,"%s.out",HAL_PREFIX);

    // hal parameter examples:
    // res += hal_param_float_newf(HAL_RW, &haldata->param_rw ,comp_id,"%s.param-rw",HAL_PREFIX);
    // res += hal_param_float_newf(HAL_RO, &haldata->param_ro ,comp_id,"%s.param-ro",HAL_PREFIX);

    // hal pins required for xyzbu_st kinematics:
    res += hal_pin_float_newf(HAL_IN ,&(haldata->tool_offset_z),comp_id,"%s.tool-offset-z" ,HAL_PREFIX);
    res += hal_pin_float_newf(HAL_IN ,&(haldata->z_pivot) ,comp_id,"%s.z-pivot" ,HAL_PREFIX);
    res += hal_pin_float_newf(HAL_IN ,&(haldata->x_offset) ,comp_id,"%s.x-offset" ,HAL_PREFIX);
    res += hal_pin_float_newf(HAL_IN ,&(haldata->man_b_rot) ,comp_id,"%s.man-b-rot" ,HAL_PREFIX);
    res += hal_pin_float_newf(HAL_IN ,&(haldata->pre_rot) ,comp_id,"%s.pre-rot" ,HAL_PREFIX);

    // hal pins required for switchable kinematics:
    res += hal_pin_bit_new("kinstype.is-0", HAL_OUT, &(haldata->kinstype_is_0), comp_id);
    res += hal_pin_bit_new("kinstype.is-1", HAL_OUT, &(haldata->kinstype_is_1), comp_id);
    res += hal_pin_bit_new("kinstype.is-2", HAL_OUT, &(haldata->kinstype_is_2), comp_id);

    // define default kinematics at startup for switchable kinematics
    *haldata->kinstype_is_0 = 1; //default at startup -> identity kinematics
    *haldata->kinstype_is_1 = 0; //-> xyzb TCP
    *haldata->kinstype_is_2 = 0; //-> xyzb TOOL

    if (res) goto error;
    hal_ready(comp_id);
    rtapi_print("*** %s setup ok\n",__FILE__);
    return 0;
error:
    rtapi_print("\n!!! %s setup failed res=%d\n\n",__FILE__,res);
    return -1;
#undef HAL_PREFIX
}

EXPORT_SYMBOL(kinematicsType);
EXPORT_SYMBOL(kinematicsSwitchable);
EXPORT_SYMBOL(kinematicsSwitch);
EXPORT_SYMBOL(kinematicsInverse);
EXPORT_SYMBOL(kinematicsForward);

static hal_u32_t switchkins_type;

int kinematicsSwitchable() {return 1;}



int kinematicsSwitch(int new_switchkins_type)
{
    switchkins_type = new_switchkins_type;
    rtapi_print("kinematicsSwitch(): type=%d\n",switchkins_type);
    // create case structure for switchable kinematics
    switch (switchkins_type) {
        case 0: rtapi_print_msg(RTAPI_MSG_INFO,
                "kinematicsSwitch:TYPE0\n");
                *haldata->kinstype_is_0 = 1;
                *haldata->kinstype_is_1 = 0;
                *haldata->kinstype_is_2 = 0;
                break;
        case 1: rtapi_print_msg(RTAPI_MSG_INFO,
                "kinematicsSwitch:TYPE1\n");
                *haldata->kinstype_is_0 = 0;
                *haldata->kinstype_is_1 = 1;
                *haldata->kinstype_is_2 = 0;
                break;
        case 2: rtapi_print_msg(RTAPI_MSG_INFO,
                "kinematicsSwitch:TYPE1\n");
                *haldata->kinstype_is_0 = 0;
                *haldata->kinstype_is_1 = 0;
                *haldata->kinstype_is_2 = 1;
                break;
      default: rtapi_print_msg(RTAPI_MSG_ERR,
                "kinematicsSwitch:BAD VALUE <%d>\n",
                switchkins_type);
                *haldata->kinstype_is_1 = 0;
                *haldata->kinstype_is_0 = 0;
                *haldata->kinstype_is_2 = 0;
                return -1; // FAIL
    }
    return 0; // ok
}

KINEMATICS_TYPE kinematicsType()
{
static bool is_setup=0;
    if (!is_setup)  xyzbu_st_setup();
    return KINEMATICS_BOTH; // set as required
           // Note: If kinematics are identity, using KINEMATICS_BOTH
           //       may be used in order to allow a gui to display
           //       joint values in preview prior to homing
} // kinematicsType()



static bool is_ready=0;

int kinematicsForward(const double *j,
                      EmcPose * pos,
                      const KINEMATICS_FORWARD_FLAGS * fflags,
                      KINEMATICS_INVERSE_FLAGS * iflags)
{
    static bool gave_msg;

    // START of custom variable declaration for Forward kinematics

    // geometric offsets of the universal spindle head as defined in the ini file
    double         Lz = *haldata->z_pivot;
    double         Dx = *haldata->x_offset;
    double         tc = *haldata->pre_rot; // radians

    // tool-length offset if G43 is used (offset as defined in the tool editor)
    double          Dt = *(haldata->tool_offset_z);

    // substitutions as used in mathematical documentation
    // including degree -> radians angle conversion
    double       Sb = sin(*haldata->man_b_rot*TO_RAD);
    double       Cb = cos(*haldata->man_b_rot*TO_RAD);
    double      Stc = sin(tc);
    double      Ctc = cos(tc);

    // used to be consistent with mathematical documentation
    double       Px = 0;
    double       Py = 0;
    double       Pz = 0;

    // END of custom variable declaration for Forward kinematics

    // define forward kinematic models using case structure for
    // for switchable kinematics
    switch (switchkins_type) {
        case 0: // ========================= IDENTITY kinematics FORWARD ======================
            pos->tran.x = j[0];
            pos->tran.y = j[1];
            pos->tran.z = j[2];
            pos->u      = j[3];

            break;

        case 1: // ========================= TCP kinematics FORWARD ======================
            // onLy used to be consistent with math in documentation
            Px          = j[0];
            Py          = j[1];
            Pz          = j[2];

            pos->tran.x = - Cb*Dx - (Dt + Lz)*Sb + Dx + Px;

            pos->tran.y = Py;

            pos->tran.z = - Cb*(Dt + Lz) + Dx*Sb + Dt + Lz + Pz; 

            pos->u      = j[3];

            break;



        case 2: // ========================= TOOL kinematics FORWARD ======================
            // onLy used to be consistent with mathematical documentation
            Px          = j[0];
            Py          = j[1];
            Pz          = j[2];

            pos->tran.x =  Cb*Ctc*(Dx + Px) - Ctc*(Lz + Pz)*Sb - Ctc*Dx + Py*Stc;

            pos->tran.y =  -Cb*(Dx + Px)*Stc + (Lz + Pz)*Sb*Stc + Ctc*Py + Dx*Stc;

            pos->tran.z =  Cb*(Lz + Pz) + (Dx + Px)*Sb - Lz ;

            pos->u      = j[3];
            break;
    }
    // unused coordinates:

    pos->a = 0;
    pos->b = 0;
    pos->c = 0;
    pos->v = 0;
    pos->w = 0;

    // pass the current position to the outside world

    if (*haldata->in && !is_ready && !gave_msg) {
       rtapi_print_msg(RTAPI_MSG_ERR,
                       "%s in pin not echoed until Inverse called\n",
                      __FILE__);
       gave_msg=1;
    }
    return 0;
} // kinematicsForward()

int kinematicsInverse(const EmcPose * pos,
                      double *j,
                      const KINEMATICS_INVERSE_FLAGS * iflags,
                      KINEMATICS_FORWARD_FLAGS * fflags)
{
    is_ready = 1; // Inverse is not called until homed for KINEMATICS_BOTH

    // START of custom variable declaration for Forward kinematics

    // geometric offsets of the universal spindle head as defined in the ini file
    double         Lz = *haldata->z_pivot;
    double         Dx = *haldata->x_offset;
    double         tc = *haldata->pre_rot; // radians

    // tool-length offset if G43 is used (offset as defined in the tool editor)
    double          Dt = *(haldata->tool_offset_z);

    // substitutions as used in mathematical documentation
    // including degree -> radians angle conversion
    double       Sb = sin(*haldata->man_b_rot*TO_RAD);
    double       Cb = cos(*haldata->man_b_rot*TO_RAD);
    double      Stc = sin(tc);
    double      Ctc = cos(tc);

    // used to be consistent with mathematical documentation
    double       Qx = 0;
    double       Qy = 0;
    double       Qz = 0;

   // END of custom variable declaration for Forward kinematics


    // Update the kinematic joints specified by the
    // [KINS]JOINTS setting (4 required for this template).
    // define forward kinematic models using case structure for
    // for switchable kinematics
    switch (switchkins_type) {

        case 0: // ========================= IDENTITY kinematics INVERSE ======================
            j[0] = pos->tran.x;
            j[1] = pos->tran.y;
            j[2] = pos->tran.z;
            j[3] = pos->u;


            break;

        case 1: // ========================= TCP kinematics INVERSE ======================
            Qx = pos->tran.x;
            Qy = pos->tran.y; 
            Qz = pos->tran.z;   

            j[0] =  Cb*Dx + (Dt + Lz)*Sb - Dx + Qx;

            j[1] =  Qy;

            j[2] =  Cb*(Dt + Lz) - Dx*Sb - Dt - Lz + Qz;

            j[3] = pos->u;

            break;

        case 2: // ========================= TOOL kinematics INVERSE ======================
            Qx = pos->tran.x;
            Qy = pos->tran.y;
            Qz = pos->tran.z;


            j[0] = Cb*Ctc*Qx - Cb*Qy*Stc + Cb*Dx + Lz*Sb + Qz*Sb - Dx;

            j[1] = Ctc*Qy + Qx*Stc;

            j[2] = -Ctc*Qx*Sb + Qy*Sb*Stc + Cb*Lz + Cb*Qz - Dx*Sb - Lz;

            j[3] = pos->u;

            break;
    }

    //example hal pin update (homing reqd before kinematicsInverse)
    *haldata->out = *haldata->in; //dereference
    //read from param example: *haldata->out = haldata->param_rw;

    return 0;
} // kinematicsInverse()
