TILTED WORK PLANE 

This collection of simulation configs includes a python remap of gcodes for Tilted Workplane (TWP) functionality. This is sometimes also referred to as 'Inclined Plane Machining'. Implementation of this feature varies between different control manufacturers. This implementation aims to follow the Fanuc standard.

Purpose:
The tilted-workplane function makes it possible to define a new coordinate system (ie the TWP coordinate system) by rotating and optionally translating the current work coordinate system (WCS) around the X-, Y- and Z-axis. Using this function an operator can define an arbitrarily positioned and oriented plane in space and the desired machining contour can be programmed easily as if the plane concerned were an ordinary XY-plane.


Implemented TWP functionality:

--- G68.[2,3,4] commands are used to define (or redefine in the case of G68.4) the position and orientation of the Tilted Work Plane. None of these commands cause machine movement. ---

G68.2 (P0) (Q-) (X-) (Y-) (Z-) (I-) (J-) (K-) (R-)  - Defines TWP using true euler-angles
      Q-       - Defines the order of rotations (defaults to 'Q313' ie: ZXZ)
                  [121, 131, 212, 232, 313, 323] the numbers symbolize a series of rotations around an axis (1:X, 2:Y, 3:Z)
      X- Y- Z  - TWP origin in the current WCS origin (omitted Letters default to 0)
      I- J- K- - Angles of rotation in degrees with I-:1.rotation, J-:2.rotation, K-:3.rotation (omitted Letters default to 0)
      R-       - Angle of rotation around the TWP-z-axis (defaults to 0)

      Example:
      G68.2 Q212 X-100 Y200 J45 K-10 R50


G68.2 P1 (Q-) (X-) (Y-) (Z-) (I-) (J-) (K-) (R-)  - Defines TWP using non-true euler-angles (eg. roll-pitch-yaw)
      Q-       - Defines the order of rotations (defaults to 'Q123' ie: roll-pitch-yaw)
                 [123, 132, 213, 231, 312, 321] the numbers symbolize a series of rotations around an axis (1:X, 2:Y, 3:Z)
      X- Y- Z  - TWP origin in the current WCS origin (omitted Letters default to 0)
      I- J- K- - Angles of rotation in degrees with I-:1.rotation, J-:2.rotation, K-:3.rotation (omitted Letters default to 0)
      R-       - Angle of rotation around the TWP-z-axis (defaults to 0)


G68.2 P2  Q- ...            - Defines TWP using coordinates of 3 points (in the current WCS)
                              Requires at least three consecutive commands (Q1, Q2, Q3) or optionally (Q0, Q1, Q2, Q3)
          Q0 (X-) (Y-) (Z-) - TWP origin in the current WCS origin (omitted Letters default to 0)
                              Effectively shifts the value of the first point to this coordinate
             (R-)           - Angle of rotation around the TWP-z-axis (defaults to 0)
          Q1 (I-) (J-) (K-) - Coordinatess of Point 1: defines the origin of the TWP (if Q0 is ommited or set to X0 Y0 Z0)
          Q2 (I-) (J-) (K-) - Coordinatess of Point 2: direction from P1 to P2 defines the positive x direction on the TWP 
          Q2 (I-) (J-) (K-) - Coordinatess of Point 3: defines a point on the positive Y side on the TWP

          It is an error if:
                            - G68.2 P2 (Q0),Q1,Q2,Q3 commands are not entered consecutively
                            - two to the points entered in Q1,Q2,Q3 are identical
                            - all three points entered in Q1,Q2,Q3 are on a line
                            - the distance between a line defined by any two points entered in (Q1,Q2,Q3) and the remaining point  is less than 10mm or 0.5inch

G68.2  P3 Q- ...            - Defines TWP using 2-vectors (ie defining TWP x- and z-vectors)
                              Requires two consecutive commands (Q1 and Q2)
          Q1 (X-) (Y-) (Z-) (I-) (J-) (K-) (R-)
             X- Y- Z-       - TWP origin in the current WCS origin (omitted Letters default to 0)
             I- J- K-       - Define direction of the TWP x-vector (with point coordinates as I:x, J:y, K:z)
             R-             - Angle of rotation around the TWP-z-axis (defaults to 0)

          Q2 (I-) (J-) (K-)
             I- J- K-       - Define direction of the TWP z-vector (with point coordinates as I:x, J:y, K:z)

          It is an error if:
                            - G68.2 P3 Q1 and Q2 commands are not entered consecutively
                            - one of the vectors is the zero vector
                            - the enclosed angle between the 1. and 2. vector is <85° or >95°


G68.3 (X-) (Y-) (Z-) (R-)  - Defines TWP using the current tool orientation
        X- Y- Z            - TWP origin in the current WCS origin (omitted Letters default to 0)
        R-                 - Angle of rotation around the TWP-z-axis (defaults to 0)


G68.4 ... - Same usage as G68.2 but as an incremental definition from an active TWP plane
          It is an error if:
                          - G68.4 is commanded with no TWP plane defined


--- G69 : cancels the current TWP (resets all parameters, switches to G54 and sets Identity kinematics). This does not cause any machine movement. ---

--- G53.[1,3,6] commands are used to orient the tool to be perpendicular to the Tilted Work Plane. This will (in most cases) cause machine movement. ---

G53.1 (P-)  - Spindle orientation without tcp, switches to G59 and activates TOOL kinematics (defaults to P0)

       P    - Orientation strategy (0: shortest distance, 1: positive rotation only, 2: negative rotation only)
                Notes:
                    - Strategy applies to the 'prioritized' rotary, the other rotary moves the shortest distance.
                    - The prioritized rotary can be set using the [TWP]PRIORITY value (1 or 2) in the ini file.


G53.3 (P-) (X-) (Y-) (Z-) - Same as G53.1 but with simultaneous move to the XYZ coords in the TWP coordinate system.


G53.6 (P-)                - Same as G53.1 but spindle orientation using TCP


General notes about TWP implementation in LinuxCNC:

    - For easier abort handling TWP can only be defined when in 'G54', as LinuxCNC currently reverts to this after an abort.
    - Axis limit checking done in the current motion planner is ignorant of the manipulations done in the custom kinematic component. To avoid erroneous limit violation errors when loading gcode the axis limits set in the [AXIS_l] sections of the ini file will in most cases have to be expanded. This can be done automatically during gcode execution when switching from one kinematic to another. See the 'millturn' simulation configuration for an example.
